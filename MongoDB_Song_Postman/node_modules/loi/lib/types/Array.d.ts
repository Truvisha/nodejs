import * as t from '../iots';
import { LoiFactory } from '../utilties/factory';
import { LoiFactoryBase } from './Base';
declare type Clean<T extends t.Any> = t.Type<T['_A'], T['_O'], T['_I']>;
export declare type LoiFactoryTypeArray<E extends t.Any, T extends t.Any> = T & LoiFactoryArray<E, T> & LoiFactoryBase<T>;
export declare class LoiFactoryArray<E extends t.Any, T extends t.Any> extends LoiFactory<T> {
    /**
     * Specifies the exact number of items in the array
     * @param limit the number of array items allowed
     */
    length(limit: number): LoiFactoryTypeArray<Clean<E>, Clean<t.RefinementType<this, t.TypeOf<this>, t.OutputOf<this>, t.InputOf<this>>>>;
    /**
     * Specifies the maximum number of items in the array
     * @param limit the highest number of array items allowed
     */
    max(limit: number): LoiFactoryTypeArray<Clean<E>, Clean<t.RefinementType<this, t.TypeOf<this>, t.OutputOf<this>, t.InputOf<this>>>>;
    /**
     * Specifies the minimum number of items in the array
     * @param limit the lowest number of array items allowed
     */
    min(limit: number): LoiFactoryTypeArray<Clean<E>, Clean<t.RefinementType<this, t.TypeOf<this>, t.OutputOf<this>, t.InputOf<this>>>>;
}
export declare function array<E extends t.Any = t.Any>(elementType: E, name?: string): LoiFactoryTypeArray<Clean<E>, Clean<t.ArrayType<t.Type<E["_A"], E["_O"], E["_I"]>, E["_A"][], E["_O"][], t.mixed>>>;
export {};
