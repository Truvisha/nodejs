"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.boolean = exports.LoiFactoryBooleanInitial = exports.LoiFactoryBoolean = void 0;
const t = require("../iots");
const convert_1 = require("../decorators/convert");
const nullAsUndefined_1 = require("../decorators/nullAsUndefined");
const factory_1 = require("../utilties/factory");
const lodash_1 = require("../utilties/lodash");
const mimic_1 = require("../utilties/mimic");
const Base_1 = require("./Base");
const trueValues = ["true", "t", "yes", "y", "on", "1"];
const falseValues = ["false", "f", "no", "n", "off", "0"];
class LoiFactoryBoolean extends factory_1.LoiFactory {
    /** @internal */
    static decorate(t) {
        return Base_1.LoiFactoryBase.decorate(factory_1.decorate(this, t));
    }
    parseString() {
        const type = new convert_1.LoiDecoratorConvert(this, (i) => {
            const val = i.toLowerCase();
            if (trueValues.indexOf(val) >= 0)
                return true;
            if (falseValues.indexOf(val) >= 0)
                return false;
            return i;
        }, (i) => lodash_1.isString(i));
        return factory_1.metadata(LoiFactoryBoolean.decorate(type), {
            parent: this,
            option: { name: `parseString`, parseString: true }
        });
    }
    parseNumber() {
        const type = new convert_1.LoiDecoratorConvert(this, (i) => {
            if (Number.isNaN(i))
                return false;
            if (i === 0)
                return false;
            return true;
        }, (i) => lodash_1.isNumber(i));
        return factory_1.metadata(LoiFactoryBoolean.decorate(type), {
            parent: this,
            option: { name: `parseNumber`, parseNumber: true }
        });
    }
    parse() {
        return this.parseNumber().parseString();
    }
}
exports.LoiFactoryBoolean = LoiFactoryBoolean;
class LoiFactoryBooleanInitial extends factory_1.LoiFactory {
    /** @internal */
    static decorate(t) {
        return LoiFactoryBoolean.decorate(Base_1.LoiFactoryBase.decorate(factory_1.decorate(this, t)));
    }
    trueOnly(violet = false) {
        let type = t.refinement(this, (i) => i === true);
        if (violet) {
            type = new convert_1.LoiDecoratorConvert(new nullAsUndefined_1.LoiDecoratorNullAsUndefined(type), () => undefined, (i) => i === false);
        }
        return factory_1.metadata(LoiFactoryBoolean.decorate(type), {
            parent: this,
            tag: "true",
            option: violet ? { name: `violet`, violet: true } : undefined
        });
    }
    falseOnly(violet = false) {
        let type = t.refinement(this, (i) => i === false);
        if (violet) {
            type = new convert_1.LoiDecoratorConvert(new nullAsUndefined_1.LoiDecoratorNullAsUndefined(type), () => undefined, (i) => i === true);
        }
        return factory_1.metadata(LoiFactoryBoolean.decorate(type), {
            parent: this,
            tag: "false",
            option: violet ? { name: `violet`, violet: true } : undefined
        });
    }
}
exports.LoiFactoryBooleanInitial = LoiFactoryBooleanInitial;
// tslint:disable-next-line:variable-name
exports.boolean = mimic_1.mimic(function boolean() {
    const type = new t.BooleanType();
    return factory_1.metadata(LoiFactoryBooleanInitial.decorate(type), {
        tag: "boolean"
    });
}, new t.BooleanType());
//# sourceMappingURL=Boolean.js.map