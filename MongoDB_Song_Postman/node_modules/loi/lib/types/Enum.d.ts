import * as t from '../iots';
import { LoiFactory } from '../utilties/factory';
import { LoiFactoryBase } from './Base';
declare type Clean<T extends t.Any> = t.Type<T['_A'], T['_O'], T['_I']>;
export declare type LoiFactoryTypeEnum<E, T extends t.Any> = T & LoiFactoryEnum<E, T> & LoiFactoryBase<T>;
export declare class LoiFactoryEnum<E, T extends t.Any> extends LoiFactory<T> {
}
export declare function enumeration<E extends F[keyof F], F extends object>(e: F, name?: string): LoiFactoryTypeEnum<E, Clean<t.Type<E, E, t.mixed>>>;
export {};
