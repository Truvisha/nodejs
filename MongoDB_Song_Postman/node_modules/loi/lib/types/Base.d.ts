import * as t from '../iots';
import { LoiDecoratorDefault, LoiDecoratorDefaultResolver } from '../decorators/default';
import { LoiDecoratorNullAsUndefined } from '../decorators/nullAsUndefined';
import { LoiDecoratorRescue, LoiDecoratorRescueResolver } from '../decorators/rescue';
import { LoiFactory } from '../utilties/factory';
export declare type LoiFactoryTypeBaseUnion<T extends t.Any> = t.UnionType<(T)[], (T)["_A"], (T)["_O"], t.mixed> & LoiFactoryBase<t.Type<(T)["_A"], (T)["_O"], t.mixed>>;
export declare type LoiFactoryTypeBase<T extends t.Any> = T & LoiFactoryBase<T>;
declare type Clean<T extends t.Any> = t.Type<T['_A'], T['_O'], T['_I']>;
export declare class LoiFactoryBase<T extends t.Any> extends LoiFactory<T> {
    nullAsUndefined(): LoiFactoryTypeBase<Clean<LoiDecoratorNullAsUndefined<this>>>;
    nullable<CVS extends (string | number | boolean | null | undefined)[]>(allow?: true, ...castValues: CVS): LoiFactoryTypeBase<t.Type<this["_A"] | null, this["_O"] | null, this["_I"]>>;
    nullable(allow: false): LoiFactoryTypeBase<t.Type<Exclude<this["_A"], null>, Exclude<this["_O"], null>, this["_I"]>>;
    undefinedable<CVS extends (string | number | boolean | null | undefined)[]>(allow?: true, ...castValues: CVS): LoiFactoryTypeBase<t.Type<this["_A"] | undefined, this["_O"] | undefined, this["_I"]>>;
    undefinedable(allow: false): LoiFactoryTypeBase<t.Type<Exclude<this["_A"], undefined>, Exclude<this["_O"], undefined>, this["_I"]>>;
    /**
     * Sets properties default values when calling t.validate() method on models
     * @param value default value
     */
    default(value: this['_A']): LoiFactoryTypeBase<Clean<LoiDecoratorDefault<this>>>;
    /**
     * Sets properties default values with resolver functions when calling t.validate() method on models
     * @param value default value resolver
     */
    defaultResolver(resolver: () => this['_A']): LoiFactoryTypeBase<Clean<LoiDecoratorDefaultResolver<this>>>;
    /**
     * Make it never fails with rescue value
     * @param value rescue value
     */
    rescue(value: this['_A']): LoiFactoryTypeBase<Clean<LoiDecoratorRescue<this>>>;
    /**
     * Make it never fails with rescue resolver
     * @param value rescue value resolver
     */
    rescueResolver(resolver: () => this['_A']): LoiFactoryTypeBase<Clean<LoiDecoratorRescueResolver<this>>>;
    /**
     * Return the base io-ts type without Loi decorators.
     */
    asBaseType(): t.Type<T['_A'], T['_O'], T['_I']>;
    /**
     * Return the base io-ts type without Loi decorators.
     */
    finish(): t.Type<T["_A"], T["_O"], T["_I"]>;
    /**
     * Return the base io-ts type without Loi decorators.
     */
    end(): t.Type<T["_A"], T["_O"], T["_I"]>;
    /**
     * Return the base io-ts type without Loi decorators.
     */
    simple(): t.Type<T["_A"], T["_O"], T["_I"]>;
    /**
     * Return the base io-ts type without Loi decorators.
     */
    clean(): t.Type<T["_A"], T["_O"], T["_I"]>;
    allow<T1 extends t.Any>(t1: T1): LoiFactoryTypeBaseUnion<t.Type<this['_A'], this['_O'], this['_I']> | t.Type<T1['_A'], T1['_O'], T1['_I']>>;
    allow<T1 extends t.Any, T2 extends t.Any>(t1: T1, t2: T2): LoiFactoryTypeBaseUnion<t.Type<this['_A'], this['_O'], this['_I']> | t.Type<T1['_A'], T1['_O'], T1['_I']> | t.Type<T2['_A'], T2['_O'], T2['_I']>>;
    allow<T1 extends t.Any, T2 extends t.Any, T3 extends t.Any>(t1: T1, t2: T2, t3: T3): LoiFactoryTypeBaseUnion<t.Type<this['_A'], this['_O'], this['_I']> | t.Type<T1['_A'], T1['_O'], T1['_I']> | t.Type<T2['_A'], T2['_O'], T2['_I']> | t.Type<T3['_A'], T3['_O'], T3['_I']>>;
    allow<T1 extends t.Any, T2 extends t.Any, T3 extends t.Any, T4 extends t.Any>(t1: T1, t2: T2, t3: T3, t4: T4): LoiFactoryTypeBaseUnion<t.Type<this['_A'], this['_O'], this['_I']> | t.Type<T1['_A'], T1['_O'], T1['_I']> | t.Type<T2['_A'], T2['_O'], T2['_I']> | t.Type<T3['_A'], T3['_O'], T3['_I']> | t.Type<T4['_A'], T4['_O'], T4['_I']>>;
    allow<T1 extends t.Any, T2 extends t.Any, T3 extends t.Any, T4 extends t.Any, T5 extends t.Any>(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5): LoiFactoryTypeBaseUnion<t.Type<this['_A'], this['_O'], this['_I']> | t.Type<T1['_A'], T1['_O'], T1['_I']> | t.Type<T2['_A'], T2['_O'], T2['_I']> | t.Type<T3['_A'], T3['_O'], T3['_I']> | t.Type<T4['_A'], T4['_O'], T4['_I']> | t.Type<T5['_A'], T5['_O'], T5['_I']>>;
    allow<T1 extends t.Any, T2 extends t.Any, T3 extends t.Any, T4 extends t.Any, T5 extends t.Any, T6 extends t.Any>(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6): LoiFactoryTypeBaseUnion<t.Type<this['_A'], this['_O'], this['_I']> | t.Type<T1['_A'], T1['_O'], T1['_I']> | t.Type<T2['_A'], T2['_O'], T2['_I']> | t.Type<T3['_A'], T3['_O'], T3['_I']> | t.Type<T4['_A'], T4['_O'], T4['_I']> | t.Type<T5['_A'], T5['_O'], T5['_I']> | t.Type<T6['_A'], T6['_O'], T6['_I']>>;
    allow<T1 extends t.Any, T2 extends t.Any, T3 extends t.Any, T4 extends t.Any, T5 extends t.Any, T6 extends t.Any, T7 extends t.Any>(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7): LoiFactoryTypeBaseUnion<t.Type<this['_A'], this['_O'], this['_I']> | t.Type<T1['_A'], T1['_O'], T1['_I']> | t.Type<T2['_A'], T2['_O'], T2['_I']> | t.Type<T3['_A'], T3['_O'], T3['_I']> | t.Type<T4['_A'], T4['_O'], T4['_I']> | t.Type<T5['_A'], T5['_O'], T5['_I']> | t.Type<T6['_A'], T6['_O'], T6['_I']> | t.Type<T7['_A'], T7['_O'], T7['_I']>>;
    allow<T1 extends t.Any, T2 extends t.Any, T3 extends t.Any, T4 extends t.Any, T5 extends t.Any, T6 extends t.Any, T7 extends t.Any, T8 extends t.Any>(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8): LoiFactoryTypeBaseUnion<t.Type<this['_A'], this['_O'], this['_I']> | t.Type<T1['_A'], T1['_O'], T1['_I']> | t.Type<T2['_A'], T2['_O'], T2['_I']> | t.Type<T3['_A'], T3['_O'], T3['_I']> | t.Type<T4['_A'], T4['_O'], T4['_I']> | t.Type<T5['_A'], T5['_O'], T5['_I']> | t.Type<T6['_A'], T6['_O'], T6['_I']> | t.Type<T7['_A'], T7['_O'], T7['_I']> | t.Type<T8['_A'], T8['_O'], T8['_I']>>;
    allow<T1 extends t.Any, T2 extends t.Any, T3 extends t.Any, T4 extends t.Any, T5 extends t.Any, T6 extends t.Any, T7 extends t.Any, T8 extends t.Any, T9 extends t.Any>(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9): LoiFactoryTypeBaseUnion<t.Type<this['_A'], this['_O'], this['_I']> | t.Type<T1['_A'], T1['_O'], T1['_I']> | t.Type<T2['_A'], T2['_O'], T2['_I']> | t.Type<T3['_A'], T3['_O'], T3['_I']> | t.Type<T4['_A'], T4['_O'], T4['_I']> | t.Type<T5['_A'], T5['_O'], T5['_I']> | t.Type<T6['_A'], T6['_O'], T6['_I']> | t.Type<T7['_A'], T7['_O'], T7['_I']> | t.Type<T8['_A'], T8['_O'], T8['_I']> | t.Type<T9['_A'], T9['_O'], T9['_I']>>;
    allow<T1 extends t.Any, T2 extends t.Any, T3 extends t.Any, T4 extends t.Any, T5 extends t.Any, T6 extends t.Any, T7 extends t.Any, T8 extends t.Any, T9 extends t.Any, T10 extends t.Any>(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10): LoiFactoryTypeBaseUnion<t.Type<this['_A'], this['_O'], this['_I']> | t.Type<T1['_A'], T1['_O'], T1['_I']> | t.Type<T2['_A'], T2['_O'], T2['_I']> | t.Type<T3['_A'], T3['_O'], T3['_I']> | t.Type<T4['_A'], T4['_O'], T4['_I']> | t.Type<T5['_A'], T5['_O'], T5['_I']> | t.Type<T6['_A'], T6['_O'], T6['_I']> | t.Type<T7['_A'], T7['_O'], T7['_I']> | t.Type<T8['_A'], T8['_O'], T8['_I']> | t.Type<T9['_A'], T9['_O'], T9['_I']> | t.Type<T10['_A'], T10['_O'], T10['_I']>>;
    allow<T1 extends t.Any, T2 extends t.Any, T3 extends t.Any, T4 extends t.Any, T5 extends t.Any, T6 extends t.Any, T7 extends t.Any, T8 extends t.Any, T9 extends t.Any, T10 extends t.Any, T11 extends t.Any>(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, t11: T11): LoiFactoryTypeBaseUnion<t.Type<this['_A'], this['_O'], this['_I']> | t.Type<T1['_A'], T1['_O'], T1['_I']> | t.Type<T2['_A'], T2['_O'], T2['_I']> | t.Type<T3['_A'], T3['_O'], T3['_I']> | t.Type<T4['_A'], T4['_O'], T4['_I']> | t.Type<T5['_A'], T5['_O'], T5['_I']> | t.Type<T6['_A'], T6['_O'], T6['_I']> | t.Type<T7['_A'], T7['_O'], T7['_I']> | t.Type<T8['_A'], T8['_O'], T8['_I']> | t.Type<T9['_A'], T9['_O'], T9['_I']> | t.Type<T10['_A'], T10['_O'], T10['_I']> | t.Type<T11['_A'], T11['_O'], T11['_I']>>;
    allow<T1 extends t.Any, T2 extends t.Any, T3 extends t.Any, T4 extends t.Any, T5 extends t.Any, T6 extends t.Any, T7 extends t.Any, T8 extends t.Any, T9 extends t.Any, T10 extends t.Any, T11 extends t.Any, T12 extends t.Any>(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, t11: T11, t12: T12): LoiFactoryTypeBaseUnion<t.Type<this['_A'], this['_O'], this['_I']> | t.Type<T1['_A'], T1['_O'], T1['_I']> | t.Type<T2['_A'], T2['_O'], T2['_I']> | t.Type<T3['_A'], T3['_O'], T3['_I']> | t.Type<T4['_A'], T4['_O'], T4['_I']> | t.Type<T5['_A'], T5['_O'], T5['_I']> | t.Type<T6['_A'], T6['_O'], T6['_I']> | t.Type<T7['_A'], T7['_O'], T7['_I']> | t.Type<T8['_A'], T8['_O'], T8['_I']> | t.Type<T9['_A'], T9['_O'], T9['_I']> | t.Type<T10['_A'], T10['_O'], T10['_I']> | t.Type<T11['_A'], T11['_O'], T11['_I']> | t.Type<T12['_A'], T12['_O'], T12['_I']>>;
    allow<T1 extends t.Any, T2 extends t.Any, T3 extends t.Any, T4 extends t.Any, T5 extends t.Any, T6 extends t.Any, T7 extends t.Any, T8 extends t.Any, T9 extends t.Any, T10 extends t.Any, T11 extends t.Any, T12 extends t.Any, T13 extends t.Any>(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, t11: T11, t12: T12, t13: T13): LoiFactoryTypeBaseUnion<t.Type<this['_A'], this['_O'], this['_I']> | t.Type<T1['_A'], T1['_O'], T1['_I']> | t.Type<T2['_A'], T2['_O'], T2['_I']> | t.Type<T3['_A'], T3['_O'], T3['_I']> | t.Type<T4['_A'], T4['_O'], T4['_I']> | t.Type<T5['_A'], T5['_O'], T5['_I']> | t.Type<T6['_A'], T6['_O'], T6['_I']> | t.Type<T7['_A'], T7['_O'], T7['_I']> | t.Type<T8['_A'], T8['_O'], T8['_I']> | t.Type<T9['_A'], T9['_O'], T9['_I']> | t.Type<T10['_A'], T10['_O'], T10['_I']> | t.Type<T11['_A'], T11['_O'], T11['_I']> | t.Type<T12['_A'], T12['_O'], T12['_I']> | t.Type<T13['_A'], T13['_O'], T13['_I']>>;
    allow<T1 extends t.Any, T2 extends t.Any, T3 extends t.Any, T4 extends t.Any, T5 extends t.Any, T6 extends t.Any, T7 extends t.Any, T8 extends t.Any, T9 extends t.Any, T10 extends t.Any, T11 extends t.Any, T12 extends t.Any, T13 extends t.Any, T14 extends t.Any>(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, t11: T11, t12: T12, t13: T13, t14: T14): LoiFactoryTypeBaseUnion<t.Type<this['_A'], this['_O'], this['_I']> | t.Type<T1['_A'], T1['_O'], T1['_I']> | t.Type<T2['_A'], T2['_O'], T2['_I']> | t.Type<T3['_A'], T3['_O'], T3['_I']> | t.Type<T4['_A'], T4['_O'], T4['_I']> | t.Type<T5['_A'], T5['_O'], T5['_I']> | t.Type<T6['_A'], T6['_O'], T6['_I']> | t.Type<T7['_A'], T7['_O'], T7['_I']> | t.Type<T8['_A'], T8['_O'], T8['_I']> | t.Type<T9['_A'], T9['_O'], T9['_I']> | t.Type<T10['_A'], T10['_O'], T10['_I']> | t.Type<T11['_A'], T11['_O'], T11['_I']> | t.Type<T12['_A'], T12['_O'], T12['_I']> | t.Type<T13['_A'], T13['_O'], T13['_I']> | t.Type<T14['_A'], T14['_O'], T14['_I']>>;
    allow<T1 extends t.Any, T2 extends t.Any, T3 extends t.Any, T4 extends t.Any, T5 extends t.Any, T6 extends t.Any, T7 extends t.Any, T8 extends t.Any, T9 extends t.Any, T10 extends t.Any, T11 extends t.Any, T12 extends t.Any, T13 extends t.Any, T14 extends t.Any, T15 extends t.Any>(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, t11: T11, t12: T12, t13: T13, t14: T14, t15: T15): LoiFactoryTypeBaseUnion<t.Type<this['_A'], this['_O'], this['_I']> | t.Type<T1['_A'], T1['_O'], T1['_I']> | t.Type<T2['_A'], T2['_O'], T2['_I']> | t.Type<T3['_A'], T3['_O'], T3['_I']> | t.Type<T4['_A'], T4['_O'], T4['_I']> | t.Type<T5['_A'], T5['_O'], T5['_I']> | t.Type<T6['_A'], T6['_O'], T6['_I']> | t.Type<T7['_A'], T7['_O'], T7['_I']> | t.Type<T8['_A'], T8['_O'], T8['_I']> | t.Type<T9['_A'], T9['_O'], T9['_I']> | t.Type<T10['_A'], T10['_O'], T10['_I']> | t.Type<T11['_A'], T11['_O'], T11['_I']> | t.Type<T12['_A'], T12['_O'], T12['_I']> | t.Type<T13['_A'], T13['_O'], T13['_I']> | t.Type<T14['_A'], T14['_O'], T14['_I']> | t.Type<T15['_A'], T15['_O'], T15['_I']>>;
    allow<T1 extends t.Any, T2 extends t.Any, T3 extends t.Any, T4 extends t.Any, T5 extends t.Any, T6 extends t.Any, T7 extends t.Any, T8 extends t.Any, T9 extends t.Any, T10 extends t.Any, T11 extends t.Any, T12 extends t.Any, T13 extends t.Any, T14 extends t.Any, T15 extends t.Any, T16 extends t.Any>(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, t11: T11, t12: T12, t13: T13, t14: T14, t15: T15, t16: T16): LoiFactoryTypeBaseUnion<t.Type<this['_A'], this['_O'], this['_I']> | t.Type<T1['_A'], T1['_O'], T1['_I']> | t.Type<T2['_A'], T2['_O'], T2['_I']> | t.Type<T3['_A'], T3['_O'], T3['_I']> | t.Type<T4['_A'], T4['_O'], T4['_I']> | t.Type<T5['_A'], T5['_O'], T5['_I']> | t.Type<T6['_A'], T6['_O'], T6['_I']> | t.Type<T7['_A'], T7['_O'], T7['_I']> | t.Type<T8['_A'], T8['_O'], T8['_I']> | t.Type<T9['_A'], T9['_O'], T9['_I']> | t.Type<T10['_A'], T10['_O'], T10['_I']> | t.Type<T11['_A'], T11['_O'], T11['_I']> | t.Type<T12['_A'], T12['_O'], T12['_I']> | t.Type<T13['_A'], T13['_O'], T13['_I']> | t.Type<T14['_A'], T14['_O'], T14['_I']> | t.Type<T15['_A'], T15['_O'], T15['_I']> | t.Type<T16['_A'], T16['_O'], T16['_I']>>;
}
export declare function start<T extends t.Any = t.Any>(type: T, name?: string): LoiFactoryTypeBase<Clean<T>>;
export {};
