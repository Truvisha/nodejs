"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.date = exports.LoiFactoryDate = exports.LoiTypeDate = void 0;
const t = require("../iots");
const convert_1 = require("../decorators/convert");
const factory_1 = require("../utilties/factory");
const lodash_1 = require("../utilties/lodash");
const mimic_1 = require("../utilties/mimic");
const Base_1 = require("./Base");
class LoiTypeDate extends t.Type {
    constructor() {
        super('Date', (value) => lodash_1.isDate(value), (input, ctx) => {
            if (!this.is(input))
                return t.failure(input, ctx);
            const date = new Date(input);
            return !isNaN(date.getTime()) ? t.success(date) : t.failure(input, ctx);
        }, t.identity);
        this._tag = 'LoiTypeDate';
    }
}
exports.LoiTypeDate = LoiTypeDate;
LoiTypeDate._tag = 'LoiTypeDate';
class LoiFactoryDate extends factory_1.LoiFactory {
    /** @internal */
    static decorate(t) {
        return Base_1.LoiFactoryBase.decorate(factory_1.decorate(this, t));
    }
    max(limit) {
        const date = new Date(limit);
        const time = date.getTime();
        const type = t.refinement(this, (n) => n.getTime() <= time);
        return factory_1.metadata(LoiFactoryDate.decorate(type), {
            parent: this,
            option: { name: `<=${date.toJSON()}`, max: time }
        });
    }
    min(limit) {
        const date = new Date(limit);
        const time = date.getTime();
        const type = t.refinement(this, (n) => n.getTime() >= time);
        return factory_1.metadata(LoiFactoryDate.decorate(type), {
            parent: this,
            option: { name: `>=${date.toJSON()}`, min: limit }
        });
    }
    /**
     * Date.parse()
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse
     */
    parseDateString() {
        const type = new convert_1.LoiDecoratorConvert(this, (i) => {
            const date = Date.parse(i);
            return Number.isFinite(date) ? new Date(date) : i;
        }, (i) => lodash_1.isString(i));
        return factory_1.metadata(LoiFactoryDate.decorate(type), {
            parent: this,
            option: { name: "Date.parse", parseString: true }
        });
    }
}
exports.LoiFactoryDate = LoiFactoryDate;
// tslint:disable-next-line:variable-name
exports.date = mimic_1.mimic(function date() {
    const type = new LoiTypeDate();
    return factory_1.metadata(LoiFactoryDate.decorate(type), {
        tag: "date"
    });
}, new LoiTypeDate());
//# sourceMappingURL=Date.js.map