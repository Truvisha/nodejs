"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.number = exports.LoiFactoryNumber = void 0;
const t = require("../iots");
const convert_1 = require("../decorators/convert");
const factory_1 = require("../utilties/factory");
const lodash_1 = require("../utilties/lodash");
const mimic_1 = require("../utilties/mimic");
const Base_1 = require("./Base");
class LoiFactoryNumber extends factory_1.LoiFactory {
    /** @internal */
    static decorate(t) {
        return Base_1.LoiFactoryBase.decorate(factory_1.decorate(this, t));
    }
    max(limit) {
        const type = t.refinement(this, (n) => n <= limit);
        return factory_1.metadata(LoiFactoryNumber.decorate(type), {
            parent: this,
            option: { name: `<=${limit}`, max: limit }
        });
    }
    min(limit) {
        const type = t.refinement(this, (n) => n >= limit);
        return factory_1.metadata(LoiFactoryNumber.decorate(type), {
            parent: this,
            option: { name: `>=${limit}`, min: limit }
        });
    }
    greater(limit) {
        const type = t.refinement(this, (n) => n > limit);
        return factory_1.metadata(LoiFactoryNumber.decorate(type), {
            parent: this,
            option: { name: `>${limit}`, greater: limit }
        });
    }
    less(limit) {
        const type = t.refinement(this, (n) => n < limit);
        return factory_1.metadata(LoiFactoryNumber.decorate(type), {
            parent: this,
            option: { name: `<${limit}`, less: limit }
        });
    }
    negative() {
        const type = t.refinement(this, (n) => n < 0);
        return factory_1.metadata(LoiFactoryNumber.decorate(type), {
            parent: this,
            option: { name: `-`, less: 0 }
        });
    }
    positive() {
        const type = t.refinement(this, (n) => n > 0);
        return factory_1.metadata(LoiFactoryNumber.decorate(type), {
            parent: this,
            option: { name: `+`, greater: 0 }
        });
    }
    integer() {
        const type = t.refinement(this, (n) => Number.isSafeInteger(n));
        return factory_1.metadata(LoiFactoryNumber.decorate(type), {
            parent: this,
            option: { name: `integer`, integer: true }
        });
    }
    finite() {
        const type = t.refinement(this, (n) => Number.isFinite(n));
        return factory_1.metadata(LoiFactoryNumber.decorate(type), {
            parent: this,
            option: { name: `finite`, finite: true }
        });
    }
    parseFloat() {
        const type = new convert_1.LoiDecoratorConvert(this, (i) => parseFloat(i), (i) => lodash_1.isString(i));
        return factory_1.metadata(LoiFactoryNumber.decorate(type), {
            parent: this,
            option: { name: "parseFloat", parseFloat: true }
        });
    }
    refinement(callback, name) {
        const type = t.refinement(this, callback);
        return factory_1.metadata(LoiFactoryNumber.decorate(type), {
            parent: this,
            option: { name: name || `custom refinement`, refinement: callback }
        });
    }
}
exports.LoiFactoryNumber = LoiFactoryNumber;
// tslint:disable-next-line:variable-name
exports.number = mimic_1.mimic(function number() {
    const type = new t.NumberType();
    return factory_1.metadata(LoiFactoryNumber.decorate(type), {
        tag: "number"
    });
}, new t.NumberType());
//# sourceMappingURL=Number.js.map