"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.start = exports.LoiFactoryBase = void 0;
const t = require("../iots");
const default_1 = require("../decorators/default");
const nullable_1 = require("../decorators/nullable");
const nullAsUndefined_1 = require("../decorators/nullAsUndefined");
const rescue_1 = require("../decorators/rescue");
const undefinedable_1 = require("../decorators/undefinedable");
const factory_1 = require("../utilties/factory");
class LoiFactoryBase extends factory_1.LoiFactory {
    /** @internal */
    static decorate(t) {
        return factory_1.decorate(this, t);
    }
    nullAsUndefined() {
        const type = new nullAsUndefined_1.LoiDecoratorNullAsUndefined(this);
        return factory_1.metadata(LoiFactoryBase.decorate(type), {
            parent: this,
            option: { name: `null as undefined`, nullAsUndefined: true }
        });
    }
    nullable(_allow = true, ...castValues) {
        if (_allow) {
            const type = new nullable_1.LoiDecoratorNullable(this, castValues);
            return factory_1.metadata(LoiFactoryBase.decorate(type), {
                parent: this,
                option: { name: `nullable`, nullable: true },
                optionFilter: (i) => i.nullable !== true && i.nullable !== false
            });
        }
        else {
            const type = new nullable_1.LoiDecoratorNotNullable(this);
            return factory_1.metadata(LoiFactoryBase.decorate(type), {
                parent: this,
                option: { name: `not nullable`, nullable: false },
                optionFilter: (i) => i.nullable !== true && i.nullable !== false
            });
        }
    }
    undefinedable(_allow = true, ...castValues) {
        if (_allow) {
            const type = new undefinedable_1.LoiDecoratorUndefinedable(this, castValues);
            return factory_1.metadata(LoiFactoryBase.decorate(type), {
                parent: this,
                option: { name: `undefinedable`, undefinedable: true },
                optionFilter: (i) => i.undefinedable !== true && i.undefinedable !== false
            });
        }
        else {
            const type = new undefinedable_1.LoiDecoratorNotUndefinedable(this);
            return factory_1.metadata(LoiFactoryBase.decorate(type), {
                parent: this,
                option: { name: `not undefinedable`, undefinedable: false },
                optionFilter: (i) => i.undefinedable !== true && i.undefinedable !== false
            });
        }
    }
    /**
     * Sets properties default values when calling t.validate() method on models
     * @param value default value
     */
    default(value) {
        const type = new default_1.LoiDecoratorDefault(this, value);
        return factory_1.metadata(LoiFactoryBase.decorate(type), {
            parent: this,
            option: { name: `with default`, default: value }
        });
    }
    /**
     * Sets properties default values with resolver functions when calling t.validate() method on models
     * @param value default value resolver
     */
    defaultResolver(resolver) {
        const type = new default_1.LoiDecoratorDefaultResolver(this, resolver);
        return factory_1.metadata(LoiFactoryBase.decorate(type), {
            parent: this,
            option: { name: `with default`, defaultResolver: resolver }
        });
    }
    /**
     * Make it never fails with rescue value
     * @param value rescue value
     */
    rescue(value) {
        const type = new rescue_1.LoiDecoratorRescue(this, value);
        return factory_1.metadata(LoiFactoryBase.decorate(type), {
            parent: this,
            option: { name: `with rescue`, rescue: value }
        });
    }
    /**
     * Make it never fails with rescue resolver
     * @param value rescue value resolver
     */
    rescueResolver(resolver) {
        const type = new rescue_1.LoiDecoratorRescueResolver(this, resolver);
        return factory_1.metadata(LoiFactoryBase.decorate(type), {
            parent: this,
            option: { name: `with rescue`, rescueResolver: resolver }
        });
    }
    /**
     * Return the base io-ts type without Loi decorators.
     */
    asBaseType() {
        return this;
    }
    /**
     * Return the base io-ts type without Loi decorators.
     */
    finish() { return this.asBaseType(); }
    /**
     * Return the base io-ts type without Loi decorators.
     */
    end() { return this.asBaseType(); }
    /**
     * Return the base io-ts type without Loi decorators.
     */
    simple() { return this.asBaseType(); }
    /**
     * Return the base io-ts type without Loi decorators.
     */
    clean() { return this.asBaseType(); }
    allow(...ts) {
        const type = t.union([this, ...ts]);
        return factory_1.metadata(LoiFactoryBase.decorate(type), {
            tag: type.name
        });
    }
}
exports.LoiFactoryBase = LoiFactoryBase;
function start(type, name = type[factory_1.loiTag] || type.name) {
    const clonedType = Object.create(type);
    return factory_1.metadata(LoiFactoryBase.decorate(clonedType), {
        parent: type,
        tag: name
    });
}
exports.start = start;
//# sourceMappingURL=Base.js.map