"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.array = exports.LoiFactoryArray = void 0;
const t = require("../iots");
const factory_1 = require("../utilties/factory");
const Base_1 = require("./Base");
class LoiFactoryArray extends factory_1.LoiFactory {
    /** @internal */
    static decorate(t) {
        return Base_1.LoiFactoryBase.decorate(factory_1.decorate(this, t));
    }
    /**
     * Specifies the exact number of items in the array
     * @param limit the number of array items allowed
     */
    length(limit) {
        const type = t.refinement(this, (i) => i.length == limit);
        return factory_1.metadata(LoiFactoryArray.decorate(type), {
            parent: this,
            option: { name: `exact ${limit} items`, length: limit }
        });
    }
    /**
     * Specifies the maximum number of items in the array
     * @param limit the highest number of array items allowed
     */
    max(limit) {
        const type = t.refinement(this, (i) => i.length <= limit);
        return factory_1.metadata(LoiFactoryArray.decorate(type), {
            parent: this,
            option: { name: `<=${limit} items`, max: limit }
        });
    }
    /**
     * Specifies the minimum number of items in the array
     * @param limit the lowest number of array items allowed
     */
    min(limit) {
        const type = t.refinement(this, (i) => i.length >= limit);
        return factory_1.metadata(LoiFactoryArray.decorate(type), {
            parent: this,
            option: { name: `>=${limit} items`, min: limit }
        });
    }
}
exports.LoiFactoryArray = LoiFactoryArray;
function array(elementType, name = `${elementType.name}[]`) {
    const type = t.array(elementType, name);
    return factory_1.metadata(LoiFactoryArray.decorate(type), {
        tag: name
    });
}
exports.array = array;
//# sourceMappingURL=Array.js.map