import * as t from '../iots';
import { LoiDecoratorConvert } from '../decorators/convert';
import { LoiFactory } from '../utilties/factory';
import { LoiFactoryBase } from './Base';
export declare class LoiTypeDate extends t.Type<Date, Date, t.mixed> {
    static readonly _tag: 'LoiTypeDate';
    readonly _tag: 'LoiTypeDate';
    constructor();
}
declare type Clean<T extends t.Any> = t.Type<T['_A'], T['_O'], T['_I']>;
export declare type LoiFactoryTypeDate<T extends t.Any> = T & LoiFactoryDate<T> & LoiFactoryBase<T>;
export declare class LoiFactoryDate<T extends t.Any> extends LoiFactory<T> {
    max(limit: Date | number): LoiFactoryTypeDate<Clean<t.RefinementType<this, t.TypeOf<this>, t.OutputOf<this>, t.InputOf<this>>>>;
    min(limit: Date | number): LoiFactoryTypeDate<Clean<t.RefinementType<this, t.TypeOf<this>, t.OutputOf<this>, t.InputOf<this>>>>;
    /**
     * Date.parse()
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse
     */
    parseDateString(): LoiFactoryTypeDate<Clean<LoiDecoratorConvert<this, string>>>;
}
export declare const date: (() => LoiFactoryTypeDate<Clean<LoiTypeDate>>) & LoiTypeDate;
export {};
