import * as t from '../iots';
import { LoiFactory } from '../utilties/factory';
import { LoiFactoryBase } from './Base';
declare type Clean<T extends t.Any> = t.Type<T['_A'], T['_O'], T['_I']>;
export declare type LoiFactoryTypeAny<T extends t.Any> = T & LoiFactoryAny<T> & LoiFactoryBase<T>;
export declare class LoiFactoryAny<T extends t.Any> extends LoiFactory<T> {
    nonNull(): LoiFactoryTypeAny<Clean<t.RefinementType<this, t.TypeOf<this>, t.OutputOf<this>, t.InputOf<this>>>>;
}
export declare const any: (() => LoiFactoryTypeAny<Clean<t.AnyType>>) & t.AnyType;
export {};
