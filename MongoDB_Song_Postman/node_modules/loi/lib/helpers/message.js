"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createMessage = exports.createTree = exports.createMessageFromTree = void 0;
const path_1 = require("../utilties/path");
const stringify_1 = require("../utilties/stringify");
const tag_1 = require("../utilties/tag");
/** @internal */
function createMessageFromTree(nodes, level = 0, isCombinator = false) {
    const indent = Array(level).fill("  ").join("");
    const result = [];
    for (const key in nodes) {
        /* istanbul ignore else */
        if (Object.prototype.hasOwnProperty.call(nodes, key)) {
            const node = nodes[key];
            const keys = Object.keys(node.nodes);
            if (isCombinator) {
                if (keys.length > 0) {
                    result.push(`${indent}Supplied value is not ${node.context.type.name}`);
                    result.push.apply(result, createMessageFromTree(node.nodes, level + 1));
                }
                else {
                    result.push(`${indent}Supplied value \`${stringify_1.stringify(node.value)}' is not ${node.context.type.name}`);
                }
            }
            else {
                if (keys.length > 0) {
                    if (tag_1.isUnionType(node.context.type)) {
                        result.push(`${indent}Invalid value supplied to ${path_1.getJavaScriptContextPath(node.contexts)}`);
                        result.push.apply(result, createMessageFromTree(node.nodes, level + 1, true));
                    }
                    else {
                        result.push(`${indent}Invalid value supplied to ${path_1.getJavaScriptContextPath(node.contexts)}: ${node.context.type.name}`);
                        result.push.apply(result, createMessageFromTree(node.nodes, level + 1));
                    }
                }
                else {
                    result.push(`${indent}Invalid value \`${stringify_1.stringify(node.value)}' supplied to ${path_1.getJavaScriptContextPath(node.contexts)}: ${node.context.type.name}`);
                }
            }
        }
    }
    return result;
}
exports.createMessageFromTree = createMessageFromTree;
/** @internal */
function createTree(results) {
    const root = Object.create(null);
    results.forEach((r) => {
        const path = r.context.slice(0);
        let level = root;
        let current;
        const history = [];
        while (current = path.shift()) {
            history.push(current);
            const safeKey = current.key || "";
            if (!level[safeKey]) {
                level[safeKey] = {
                    key: safeKey,
                    value: r.value,
                    context: current,
                    contexts: history.slice(0),
                    nodes: Object.create(null)
                };
            }
            level = level[safeKey].nodes;
        }
    });
    return root;
}
exports.createTree = createTree;
function createMessage(results) {
    return createMessageFromTree(createTree(results)).join("\n");
}
exports.createMessage = createMessage;
//# sourceMappingURL=message.js.map