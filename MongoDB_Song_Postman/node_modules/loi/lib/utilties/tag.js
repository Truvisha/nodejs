"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isDictType = exports.isArrayType = exports.isUnionType = exports.isCompoundType = exports.isDecoratorType = exports.getRealTypeTag = exports.getTypeTag = exports.loiTagTypeDict = exports.loiTagTypeArray = exports.loiTagTypeUnion = exports.loiTagTypeCompound = exports.loiTagTypeDecorator = void 0;
exports.loiTagTypeDecorator = Symbol('loiTagTypeDecorator');
exports.loiTagTypeCompound = Symbol('loiTagTypeCompound');
exports.loiTagTypeUnion = Symbol('loiTagTypeUnion');
exports.loiTagTypeArray = Symbol('loiTagTypeArray');
exports.loiTagTypeDict = Symbol('loiTagTypeDict');
/** @internal */
function getTypeTag(type) {
    if (!type)
        return undefined;
    const tag = type._tag;
    if (tag === null || tag === undefined)
        return undefined;
    return tag;
}
exports.getTypeTag = getTypeTag;
/** @internal */
function getRealTypeTag(type) {
    const tag = getTypeTag(type);
    if (tag === undefined)
        return tag;
    return isDecoratorType(type) ? getRealTypeTag(type.type) : tag;
}
exports.getRealTypeTag = getRealTypeTag;
/** @internal */
function isDecoratorType(type) {
    const tag = getTypeTag(type);
    return !!tag && !!type.type && (!!type[exports.loiTagTypeDecorator] || ['RefinementType', 'ReadonlyType', 'ExactType'].indexOf(tag) >= 0);
}
exports.isDecoratorType = isDecoratorType;
/** @internal */
function isCompoundType(type) {
    const tag = getRealTypeTag(type);
    return !!tag && (!!type[exports.loiTagTypeCompound] || ['UnionType', 'IntersectionType'].indexOf(tag) >= 0);
}
exports.isCompoundType = isCompoundType;
/** @internal */
function isUnionType(type) {
    const tag = getRealTypeTag(type);
    return !!tag && (!!type[exports.loiTagTypeUnion] || ['UnionType'].indexOf(tag) >= 0);
}
exports.isUnionType = isUnionType;
/** @internal */
function isArrayType(type) {
    const tag = getRealTypeTag(type);
    return !!tag && (!!type[exports.loiTagTypeArray] || ['ReadonlyArrayType', 'ArrayType', 'AnyArrayType', 'TupleType'].indexOf(tag) >= 0);
}
exports.isArrayType = isArrayType;
/** @internal */
function isDictType(type) {
    const tag = getRealTypeTag(type);
    return !!tag && (!!type[exports.loiTagTypeDict] || ['DictionaryType', 'AnyDictionaryType'].indexOf(tag) >= 0);
}
exports.isDictType = isDictType;
//# sourceMappingURL=tag.js.map